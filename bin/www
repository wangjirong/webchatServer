#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('create:server');
var http = require('http');

/**
 * @Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * @Create HTTP server.
 * @websocket
 */
var server = http.createServer(app);
const io = require('socket.io')(server);

let client_List = []
io.on('connection', function (socket) {
    //接收数据
    socket.on('userLogin', obj => {
        if (!client_List.some(r => r.user.nickName === obj.user.nickName))
            client_List.push({
                socket,
                user: obj.user
            });
        socket.emit('reUserLogin', {id: socket.id, code: 200});
        console.log(obj.user.userName + "上线");
        console.log(client_List.length, "台设备在线");
        /**
         * @断开连接
         * */
        socket.on('disconnect', () => {
            console.log(obj.user.userName + "离线");
            client_List = client_List.filter(r => r.user.nickName !== obj.user.nickName);
            // console.log(client_List)
        })
    });
    /**
     *  @param添加好友
     * */
    socket.on('addFriend', data => {
        const {user, toUser} = data;
        console.log("user:" + user.nickName, "\ntoUser:" + toUser.nickName);
        const client = client_List.find(r => r.user.nickName === toUser.nickName);
        if (client) {
            console.log(client.user);
            client.socket.emit('reAddFriend', {user, code: 200});
        }
    });
    /**
     * @param聊天
     */
    socket.on('sendMessage', msg => {
        const client = client_List.find(r => r.user.nickName === msg.receiver.nickName)
        console.log(msg)
        if (client) {
            console.log(msg)
            client.socket.emit('getMessage', msg)
        }
    })

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(`server running in ${port}`)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
